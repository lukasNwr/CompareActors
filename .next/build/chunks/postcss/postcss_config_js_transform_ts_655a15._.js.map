{
  "version": 3,
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/postcss.config.js/transform.ts"],"sourcesContent":["declare const __turbopack_external_require__: (id: string) => any;\n\n// @ts-ignore\nimport postcss from \"@vercel/turbopack/postcss\";\n// @ts-ignore\nimport importedConfig from \"CONFIG\";\nimport { relative, isAbsolute, sep } from \"path\";\nimport type { Ipc } from \"../ipc/evaluate\";\n\nconst contextDir = process.cwd();\nconst toPath = (file: string) => {\n  const relPath = relative(contextDir, file);\n  if (isAbsolute(relPath)) {\n    throw new Error(\n      `Cannot depend on path (${file}) outside of root directory (${contextDir})`\n    );\n  }\n  return sep !== \"/\" ? relPath.replaceAll(sep, \"/\") : relPath;\n};\n\nconst transform = async (ipc: Ipc, cssContent: string, name: string) => {\n  let config = importedConfig;\n  if (typeof config === \"function\") {\n    config = await config({ env: \"development\" });\n  }\n  let plugins: any[];\n  if (Array.isArray(config.plugins)) {\n    plugins = config.plugins.map((plugin: [string, any] | string | any) => {\n      if (Array.isArray(plugin)) {\n        return plugin;\n      } else if (typeof plugin === \"string\") {\n        return [plugin, {}];\n      } else {\n        return plugin;\n      }\n    });\n  } else if (typeof config.plugins === \"object\") {\n    plugins = Object.entries(config.plugins).filter(([, options]) => options);\n  } else {\n    plugins = [];\n  }\n  const loadedPlugins = plugins.map((plugin) => {\n    if (Array.isArray(plugin)) {\n      const [arg, options] = plugin;\n      let pluginFactory = arg;\n\n      if (typeof pluginFactory === \"string\") {\n        pluginFactory = __turbopack_external_require__(pluginFactory);\n      }\n\n      if (pluginFactory.default) {\n        pluginFactory = pluginFactory.default;\n      }\n\n      return pluginFactory(options);\n    }\n    return plugin;\n  });\n\n  const processor = postcss(loadedPlugins);\n  const { css, map, messages } = await processor.process(cssContent, {\n    from: name,\n    to: name,\n    map: {\n      inline: false,\n    },\n  });\n\n  const assets = [];\n  for (const msg of messages) {\n    switch (msg.type) {\n      case \"asset\":\n        assets.push({\n          file: msg.file,\n          content: msg.content,\n          sourceMap:\n            typeof msg.sourceMap === \"string\"\n              ? msg.sourceMap\n              : JSON.stringify(msg.sourceMap),\n          // There is also an info field, which we currently ignore\n        });\n        break;\n      case \"file-dependency\":\n      case \"missing-dependency\":\n        ipc.send({\n          type: \"fileDependency\",\n          path: toPath(msg.file),\n        });\n        break;\n      case \"build-dependency\":\n        ipc.send({\n          type: \"buildDependency\",\n          path: toPath(msg.file),\n        });\n        break;\n      case \"dir-dependency\":\n        ipc.send({\n          type: \"dirDependency\",\n          path: toPath(msg.dir),\n          glob: msg.glob,\n        });\n        break;\n      case \"context-dependency\":\n        ipc.send({\n          type: \"dirDependency\",\n          path: toPath(msg.file),\n          glob: \"**\",\n        });\n        break;\n    }\n  }\n  return {\n    css,\n    map: JSON.stringify(map),\n    assets,\n  };\n};\n\nexport { transform as default };\n"],"names":[],"mappings":";;;;;;;;;;AASA,MAAM,aAAa,QAAQ;AAC3B,MAAM,SAAS,CAAC;IACd,MAAM,UAAU,0CAAS,YAAY;IACrC,IAAI,4CAAW,UAAU;QACvB,MAAM,IAAI,MACR,CAAC,uBAAuB,EAAE,KAAK,6BAA6B,EAAE,WAAW,CAAC,CAAC;IAE/E;IACA,OAAO,yCAAQ,MAAM,QAAQ,iDAAgB,OAAO;AACtD;AAEA,MAAM,YAAY,OAAO,KAAU,YAAoB;IACrD,IAAI;IACJ,IAAI,OAAO,WAAW,YAAY;QAChC,SAAS,MAAM,OAAO;YAAE,KAAK;QAAc;IAC7C;IACA,IAAI;IACJ,IAAI,MAAM,QAAQ,OAAO,UAAU;QACjC,UAAU,OAAO,QAAQ,IAAI,CAAC;YAC5B,IAAI,MAAM,QAAQ,SAAS;gBACzB,OAAO;YACT,OAAO,IAAI,OAAO,WAAW,UAAU;gBACrC,OAAO;oBAAC;oBAAQ,CAAC;iBAAE;YACrB,OAAO;gBACL,OAAO;YACT;QACF;IACF,OAAO,IAAI,OAAO,OAAO,YAAY,UAAU;QAC7C,UAAU,OAAO,QAAQ,OAAO,SAAS,OAAO,CAAC,GAAG,QAAQ,GAAK;IACnE,OAAO;QACL,UAAU,EAAE;IACd;IACA,MAAM,gBAAgB,QAAQ,IAAI,CAAC;QACjC,IAAI,MAAM,QAAQ,SAAS;YACzB,MAAM,CAAC,KAAK,QAAQ,GAAG;YACvB,IAAI,gBAAgB;YAEpB,IAAI,OAAO,kBAAkB,UAAU;gBACrC,gBAAgB,+BAA+B;YACjD;YAEA,IAAI,cAAc,SAAS;gBACzB,gBAAgB,cAAc;YAChC;YAEA,OAAO,cAAc;QACvB;QACA,OAAO;IACT;IAEA,MAAM,YAAY,kIAAQ;IAC1B,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,MAAM,UAAU,QAAQ,YAAY;QACjE,MAAM;QACN,IAAI;QACJ,KAAK;YACH,QAAQ;QACV;IACF;IAEA,MAAM,SAAS,EAAE;IACjB,KAAK,MAAM,OAAO,SAAU;QAC1B,OAAQ,IAAI;YACV,KAAK;gBACH,OAAO,KAAK;oBACV,MAAM,IAAI;oBACV,SAAS,IAAI;oBACb,WACE,OAAO,IAAI,cAAc,WACrB,IAAI,YACJ,KAAK,UAAU,IAAI;gBAE3B;gBACA;YACF,KAAK;YACL,KAAK;gBACH,IAAI,KAAK;oBACP,MAAM;oBACN,MAAM,OAAO,IAAI;gBACnB;gBACA;YACF,KAAK;gBACH,IAAI,KAAK;oBACP,MAAM;oBACN,MAAM,OAAO,IAAI;gBACnB;gBACA;YACF,KAAK;gBACH,IAAI,KAAK;oBACP,MAAM;oBACN,MAAM,OAAO,IAAI;oBACjB,MAAM,IAAI;gBACZ;gBACA;YACF,KAAK;gBACH,IAAI,KAAK;oBACP,MAAM;oBACN,MAAM,OAAO,IAAI;oBACjB,MAAM;gBACR;gBACA;QACJ;IACF;IACA,OAAO;QACL;QACA,KAAK,KAAK,UAAU;QACpB;IACF;AACF"}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}